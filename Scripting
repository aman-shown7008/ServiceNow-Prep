Q - How to create Checkbox.

1.  What is Scripting? Uses.
A.  Scripting in ServiceNow means writing small pieces of JavaScript code to make things work the way you want inside the platform.
    It helps you automate tasks, control form behavior, or customize the system.

    What It can do-
   🔹Scripting can be done in servicenow to customize the instance of JS.
   🔹ServiceNow provide classes and methods which can be used to enhance and customize the platform functionality.
   🔹The JS used in servicenow is based on mozilla rhino.
    When to use it-
   🔹When you need to add features beyond the default (out-of-the-box) functionality.
   🔹When you need to integrate ServiceNow with other applications or systems.
   🔹When you want to automate manual tasks and workflows.
    When to not use it-
   🔹To make a field read-only → use UI Policy
   🔹To hide a field when the form loads → use UI Policy or Form Layout
   🔹To set a field value when the assignment group changes → use Data Policy or UI Policy with conditions
    Uses- 
   🔹To auto-fill fields.
   🔹To hide/show things on a form.
   🔹To send notifications.
   🔹To update records automatically.
   🔹To do calculations.
    Types of Scripting-
    1️⃣Client-Side Scripting.
    2️⃣Server-Side Scripting.
    3️⃣Mid-Server Scripting.



2.  What is Glide Classes? Uses.
A.  Glide classes are special built-in JavaScript classes provided by ServiceNow that help you interact with the platform, such as reading or updating records, handling dates, managing sessions, and more.
    They are only available inside ServiceNow and are used mostly in server-side scripting.
    Use-Cases-
    🔹Access and modify database records.
    🔹Get current user/session info.
    🔹Work with dates/times.
    🔹Send emails or messages.
    🔹Log info for debugging.
    Server-Side Glide Classes-
    | Glide Class          | Purpose                                            |
    | -------------------- | -------------------------------------------------- |
    | `GlideRecord`        | Read/write records in tables (like SQL in JS)      |
    | `GlideSystem (gs)`   | Utility methods like logging, date/time, user info |
    | `GlideDateTime`      | Work with dates and times                          |
    | `GlideUser`          | Get info about the logged-in user                  |
    | `GlideAjax`          | Call server-side code from client-side             |
    | `GlideForm (g_form)` | Used in client scripts to change form fields       |
    | `GlideEmailOutbound` | Send emails using scripts                          |



3.  What is Client Side Scripting? UseCase.
A.  Client-side scripting runs in the user's browser and is used to control how forms behave on the UI (form layout, field visibility, validation, etc.)
    Ex - Show an alert when the form loads.
         Validate the "From Date" or other field inputs.
         Show/Hide specific choices in dropdown fields.
         Show/Hide sections on the form.
         Set a field value based on another field.
         Show a confirmation message on form submit.
    Where to use it?
    🔹UI Policies – Make fields visible, read-only, or mandatory.
    🔹Client Scripts – Write JavaScript for form behavior.
    🔹UI Actions – Add buttons or links to forms.
    🔹UI Context Menus – Add custom right-click options.
    🔹Validation Scripts – Check field values before submission.
    Client-side Glide Classes-
    | Class               | Purpose                      | Runs In | Use Case Example                            |
    | ------------------- | ---------------------------- | ------- | ------------------------------------------- |
    | `GlideAjax`         | Call server-side from client | Browser | Fetch data (e.g., user email) dynamically   |
    | `GlideDialogWindow` | Show custom modal windows    | Browser | Show confirmation or custom input dialogs   |
    | `g_form`            | Control form fields          | Browser | Show/hide fields, set values, validate data |-Imp
    | `GlideList2`        | Control list views           | Browser | Refresh or sort related lists dynamically   |
    | `GlideMenu`         | Handle UI context menus      | Browser | Add custom right-click menu options         |
    | `g_user`            | Get logged-in user info      | Browser | Check user role or get username             |



4.  What is Client Side API & Methods?
A.  GlideAjax - It is used to call server side code from client.
                Its instance is called with GlideAjax constructor. 
                It is used for Client Scripting.
                Syntax - var ga = new GlideAjax(<Script Include>),
    GlideForm - It is used to customize forms and perform some activities on form.
                By g_form Object we can access GlideForm methods.
                It is used only in Client,
                Syntax - g_form.<GlideFormMethod>(<Parameter>),
    GlideUser - It is used to get the information about the logged in User. 
                By g_user Object we can access GlideUser methods.
                It is used only in client.
                Syntax - g_user.<GlideUserMethods()>,
    GlideDialogWindow - It is used for displaying a dialog in the current window and frame.
                        It is used only in client, 
    GlideModal.



5.  How to debug the client script?
A.  Tools for debugging client script-
    🔹JavaScript Log.
    🔹Field Watcher.
    🔹Response Time Indicator.
    🔹Try/Catch of JS.



6.  What is Glide Form?
A.  GlideForm (accessed using g_form) is a client-side API in ServiceNow used to control and interact with fields, sections, and form behavior in real-time on the form UI.
    It allows you to:
    🔹Show/hide fields.
    🔹Set/get field values.
    🔹Make fields mandatory or read-only.
    🔹Display messages.
    g_form is only available in Client Scripts, UI Policies, and Client-side scripting contexts.
    Common g_form Methods:
    addDecoration(), addErrorMessage(), addInfoMessage(), addOption(),  clearOption(), clearValue(), disableAttachments(), enableAttachement(), flash(), getActionName(), getBooleanValue(), getControl(), getDecimalValue(), getIntValue(), getLabelOf(), getReference(), getSectionNames(), getSections(), getTableName(), getUniqueValue(), getValue(), hideRelatedList(), isLiveUpdating(), isMandatory(), isNewRecord(), isSectionVisible(), removeDecoration(), removeChoice(), save(), setDisabled(), setDisplay(), setLabelOf(), setMandatory(), setReadOnly(), setSectionDisplay(), setValue(), showErrorBox(), showFieldMsg(), showRelatedList(), submit(), 



7.  What is Glide User?
A.  



8.  What is Server Side Scripting? UseCase.
A.  Server-side scripting in ServiceNow runs on the server and database, not in the user's browser.
    It is used to manage data, enforce rules, send emails, and integrate with external systems.
    Use-Case-
    🔹 Update a field when a record is inserted or updated
    🔹 Set a field value based on changes in the parent record
    🔹 Validate the role of the logged-in user
    🔹 Generate events for notifications or logging
    🔹 Send automated emails or messages
    Where to use it?
    🔹Access Control Rules – Control who can see/edit data
    🔹Business Rules – Automate logic before or after saving records
    🔹Script Includes – Reusable functions for server scripts
    🔹Transform Maps – Map and manipulate imported data
    🔹Workflows / Flow Designer – Automate business processes
    Server-side Glide Classes-
    | Glide Class        | Purpose                                     | Example Use Case                            |
    | ------------------ | ------------------------------------------- | ------------------------------------------- |
    | `GlideRecord`      | Interact with database tables (CRUD ops)    | Query incidents, update records             |-Imp
    | `GlideSystem (gs)` | Get Info about (logged user, current system)| Log messages, get user ID, get current time |-Imp
    | `GlideElement`     | Work with individual fields of GlideRecord  | Check if a field is changed, set display    |
    | `GlideDateTime`    | Handle date and time values                 | Compare or format date/time fields          |
    | `GlideAggregate`   | Perform aggregate operations (COUNT, SUM)   | Count open incidents by priority            |-Imp
 


9.  What is Client scripting?
A.  Client Scripting is used to manage forms and form fields in real-time.
    It runs in the user’s browser and enhances the user experience by dynamically responding to form actions.
    When to use it-
    🔹 Show an alert when the form loads
    🔹 Show a message when a field value changes
    🔹 Set a field value based on another field’s input
    🔹 Show/Hide choices in a dropdown field
    🔹 Show/Hide sections on the form
    Types of Client Script-
    | Type         | When It Executes                                                | Use Case Example                                     |
    | ------------ | -------------------------------------------------------------   | ---------------------------------------------------- |
    | `onLoad`     | When the form is initially loaded & before control given to user| Show a welcome alert or hide a field initially       |
    |              | onLoad() func automatically populate when onload type selected  |                                                      |
    | `onChange`   | When a specific field’s value updated & changes.                | Set another field value when priority changes        |
    | `onSubmit`   | Just before the form is submitted OR saved.                     | Validate mandatory fields or show confirmation popup |
    | `onCellEdit` | When a cell value is edited in a list (List V2 editable view)   | Auto-update status when assignment group is edited   |



10. What is Glide Record?
A.  Object contaning Record.
    Used for database operation.
    Excuted on server side.



11. What is Business Rule?
A.  Server side Script that runs when record is displayed, inserted, updated, or deleted or when table is queried.
    Used to change values in the field when specific condition is met & its runs on server side.
    Runs with all the ways record is accessed like list, Form or Web service.
    When to run BR - 
    🔹After - After BR excute when form is submitted and record is updated in the database.
    🔹Before - Before BR excute when form is submitted but before record is updated in the database.
    🔹Async - Async BR runs after record are inserted, modified or queried.
    🔹Display - Display BR runs when data is read from the database and before presenting to the user.
    What Operation BR will runs- 
    🔹Insert
    🔹Update
    🔹Delete 
    🔹Query
    Global variables of BR-
    🔹current 
    🔹previous
    🔹g_scratchpad
    🔹Glide system[gs]
    How BR works-
    🔹Triger-
    🔹Action-
    🔹Action Taken-
    When to Run BR-
    🔹After- After BR excute when form is submitted and record is updated in database.
    🔹Before- Before BR is excute when form is submitted but before record is updated in database.
    🔹Async- Async BR runs when record are inserted, modified or queried. 
    🔹Await- It runs when data is read from database and before presenting to the user.
    



12. What is UI Policy?
A.  UI Policy is used to changes the behaviour of information on the form.
    Runs at client Side.
    It is primarily used to make fields Read-only, visible and mandatory on the form.
    No scripting is required.
    Advanced changes required scripting.
    Why we need UI Policy- 
    🔹Scripting in UI Policy enable a developer to create a complex condition and execute advanced behaviour.
    🔹Any behaviour addition to configurable functionality needs scripting.
    OOB[Out Of Box] UI Policy - ServiceNow has developed OOB UI Policy which are the baseline of UI Policy.



13. What is g_scratchpad?
A.  g_scratchpad is a JavaScript object used to pass data from server-side to client-side scripts when a form loads.
    It’s automatically available on the client side — no need for GlideAjax or extra calls.
    Why use it?
    🔹To avoid extra server calls (GlideAjax).
    🔹To pass server data like user info, roles, field values to the client.
    🔹To make forms load faster and easier to manage.
    Where is it used?
    🔹Server-side: UI Script or Catalog Client Script (Script section)
    🔹Client-side: Client Script (usually onLoad)



14. What is Glide System?
A.  Object to access system level information.
    Provide no of methods.
    Provide methods to perform dates calculation.
    Runs on server sides.
    Glide System Methods-
    getUser(), getUserName(), getUserID(), getUserDisplayName(), hasRole().



15. What is Glide Record?
A.  Objects containing Records.
    Used for database Operation.
    Excuted on server side.



16. What is GlideAggregate in ServiceNow?
A.  GlideAggregate is a server-side API in ServiceNow used to perform aggregate functions like:
    COUNT()
    SUM()
    AVG() (Average)
    MIN()
    MAX()
    GROUP BY
    It works similarly to SQL aggregate queries and is useful when you want summary data instead of full records.
    Why use GlideAggregate?
    🔹To count records (e.g., number of open incidents).
    🔹To sum values (e.g., total cost).
    🔹To get min/max values (e.g., earliest due date).
    🔹To group records (e.g., number of incidents per priority).
    🔹To improve performance — faster than looping through full records with GlideRecord.


Test-Cases
1.  Start_Date - https://dev347964.service-now.com/now/nav/ui/classic/params/target/sys_script_client.do%3Fsys_id%3D5ab00528c3b52610dbc11c65e40131df%26sysparm_view%3D%26sysparm_domain%3Dnull%26sysparm_domain_scope%3Dnull%26sysparm_record_row%3D2%26sysparm_record_rows%3D42%26sysparm_record_list%3Dtable%253dincident%255eORtableINincident%252ctask%255eORDERBYDESCname
    End_Date - https://dev347964.service-now.com/now/nav/ui/classic/params/target/sys_script_client.do%3Fsys_id%3Ded65a964c3792610dbc11c65e40131bc%26sysparm_view%3D%26sysparm_domain%3Dnull%26sysparm_domain_scope%3Dnull%26sysparm_record_row%3D3%26sysparm_record_rows%3D42%26sysparm_record_list%3Dtable%253dincident%255eORtableINincident%252ctask%255eORDERBYDESCname
    Testing - Incident > New.

2.  7_Days_Gap - https://dev347964.service-now.com/now/nav/ui/classic/params/target/sys_script_client.do%3Fsys_id%3Da6b079acc3792610dbc11c65e4013174%26sysparm_view%3D%26sysparm_domain%3Dnull%26sysparm_domain_scope%3Dnull
    Testing - Incident > New.

3.  Alert_Custom_View - https://dev347964.service-now.com/now/nav/ui/classic/params/target/sys_script_client.do%3Fsys_id%3D6c3a7d20c3f92610dbc11c65e40131b0%26sysparm_view%3D%26sysparm_domain%3Dnull%26sysparm_domain_scope%3Dnull
    Testing - Incident > Open > ≡ > View > Custom View.    
    https://dev347964.service-now.com/now/nav/ui/classic/params/target/incident.do%3Fsysparm_userpref.incident_list.view%3Dcustom_view%26sysparm_userpref.incident.view%3Dcustom_view%26sysparm_view%3Dcustom_view%26sys_id%3D1366f49cc371e210dbc11c65e401312e%26sysparm_record_target%3Dincident%26sysparm_record_row%3D2%26sysparm_record_rows%3D45%26sysparm_record_list%3Dactive%253Dtrue%255EORDERBYDESCnumber%26sysparm_nostack%3Dtrue

4.  Original_Priority_Value - https://dev347964.service-now.com/now/nav/ui/classic/params/target/sys_script_client.do%3Fsys_id%3Dac028e28c3f92610dbc11c65e4013174%26sysparm_view%3D%26sysparm_domain%3Dnull%26sysparm_domain_scope%3Dnull%26sysparm_record_row%3D20%26sysparm_record_rows%3D46%26sysparm_record_list%3Dtable%253dincident%255eORtableINincident%252ctask%255eORDERBYDESCname
    Changed_Priority_Value - https://dev347964.service-now.com/now/nav/ui/classic/params/target/sys_script_client.do%3Fsys_id%3D60a28aa8c3f92610dbc11c65e4013183%26sysparm_view%3D%26sysparm_domain%3Dnull%26sysparm_domain_scope%3Dnull
    Testing - Incident > New.[Not working]

5.  Planned_Start_Date - https://dev347964.service-now.com/now/nav/ui/classic/params/target/sys_script_client.do%3Fsys_id%3D92a673a0c3f12210dbc11c65e40131f1%26sysparm_view%3D%26sysparm_domain%3Dnull%26sysparm_domain_scope%3Dnull
    Planned_End_Date - https://dev347964.service-now.com/now/nav/ui/classic/params/target/sys_script_client.do%3Fsys_id%3D9268b364c3f12210dbc11c65e40131e9%26sysparm_view%3D%26sysparm_domain%3Dnull%26sysparm_domain_scope%3Dnull
    Test - Change > Create New.[Not Working]

6.  Set_Urgency - https://dev347964.service-now.com/now/nav/ui/classic/params/target/sys_script_client.do%3Fsys_id%3D9b5a4430c3352210dbc11c65e4013119%26sysparm_view%3D%26sysparm_domain%3Dnull%26sysparm_domain_scope%3Dnull%26sysparm_record_row%3D10%26sysparm_record_rows%3D49%26sysparm_record_list%3Dtable%253dincident%255eORtableINincident%252ctask%255eORDERBYDESCname
    Testing - Incident > VIP.

7.  Child_Incident - https://dev347964.service-now.com/now/nav/ui/classic/params/target/sys_script_client.do%3Fsys_id%3Dc3efe47cc3f52210dbc11c65e40131a5%26sysparm_view%3D%26sysparm_domain%3Dnull%26sysparm_domain_scope%3Dnull
    Testing - Incident > Existing.

8.  Notes_Section - https://dev347964.service-now.com/now/nav/ui/classic/params/target/sys_script_client.do%3Fsys_id%3D2fc438f0c3392210dbc11c65e40131ec%26sysparm_view%3D%26sysparm_domain%3Dnull%26sysparm_domain_scope%3Dnull
    Testing - Problem > New.

9.  Show_Active_Users - https://dev347964.service-now.com/now/nav/ui/classic/params/target/sys_script_client.do%3Fsys_id%3Da4b48578c3792210dbc11c65e40131b2%26sysparm_view%3D%26sysparm_domain%3Dnull%26sysparm_domain_scope%3Dnull
    Testing - Incident > New > Active[Checkbox].

10. Custom_View - https://dev347964.service-now.com/now/nav/ui/classic/params/target/sys_script_client.do%3Fsys_id%3D6c3a7d20c3f92610dbc11c65e40131b0%26sysparm_view%3D%26sysparm_domain%3Dnull%26sysparm_domain_scope%3Dnull
    Testing - Incident > New > View.

11. Motivational_Quote - https://dev347964.service-now.com/now/nav/ui/classic/params/target/sys_script_client.do%3Fsys_id%3D3a5b4dfcc3792210dbc11c65e401316d%26sysparm_view%3D%26sysparm_domain%3Dnull%26sysparm_domain_scope%3Dnull
    Testing - Incident > Existing.
    
12. Sarcastic_Priority_Change - https://dev347964.service-now.com/now/nav/ui/classic/params/target/sys_script_client.do%3Fsys_id%3D8cc09538c3b92210dbc11c65e40131ba%26sysparm_view%3D%26sysparm_domain%3Dnull%26sysparm_domain_scope%3Dnull
    Testing - Incident > New > Change Priority.

13. Confirm_Submit_Suggestion - https://dev347964.service-now.com/now/nav/ui/classic/params/target/sys_script_client.do%3Fsys_id%3D6a53ddf8c3b92210dbc11c65e40131fd%26sysparm_view%3D%26sysparm_domain%3Dnull%26sysparm_domain_scope%3Dnull
    Testing - Incident > New > Submit.

14. Edit_Fields_Message - https://dev347964.service-now.com/now/nav/ui/classic/params/target/sys_script_client.do%3Fsys_id%3De9e715b0c3f92210dbc11c65e401316b%26sysparm_view%3D%26sysparm_domain%3Dnull%26sysparm_domain_scope%3Dnull
    Testing - Incident > New.

15. Show/Hide fields based on Category - https://dev347964.service-now.com/now/nav/ui/classic/params/target/sys_script_client.do%3Fsys_id%3D0bd07db0c37d2210dbc11c65e401310c%26sysparm_view%3D%26sysparm_domain%3Dnull%26sysparm_domain_scope%3Dnull
    Testing - Incident > New.

16. Show field based on category - https://dev347964.service-now.com/now/nav/ui/classic/params/target/sys_script_client.do%3Fsys_id%3D0bd07db0c37d2210dbc11c65e401310c%26sysparm_view%3D%26sysparm_domain%3Dnull%26sysparm_domain_scope%3Dnull
    Testing - Incident > New.

17. Personalized Greeting - https://dev347964.service-now.com/now/nav/ui/classic/params/target/incident.do%3Fsysparm_nostack%3Dtrue%26sys_id%3De41611fcc3b92210dbc11c65e4013184%26sysparm_record_target%3Dincident%26sysparm_record_row%3D3%26sysparm_record_rows%3D49%26sysparm_record_list%3Dactive%253Dtrue%255EORDERBYDESCnumber
18. Testing - Incident > New.

19. Validate Description Length - https://dev347964.service-now.com/now/nav/ui/classic/params/target/sys_script_client.do%3Fsys_id%3Da690febcc3716210dbc11c65e40131fc%26sysparm_view%3D%26sysparm_domain%3Dnull%26sysparm_domain_scope%3Dnull
20. Testing - Incident > New.

21. Auto Assign the Name - https://dev347964.service-now.com/now/nav/ui/classic/params/target/sys_script_client.do%3Fsys_id%3D91973634c3b16210dbc11c65e4013192%26sysparm_view%3D%26sysparm_domain%3Dnull%26sysparm_domain_scope%3Dnull
22. Testing - Incident > New > AssignTo.

23. Mark Resolved Prompt - https://dev347964.service-now.com/now/nav/ui/classic/params/target/sys_script_client.do%3Fsys_id%3D862c7a3cc3b16210dbc11c65e401315a%26sysparm_view%3D%26sysparm_domain%3Dnull%26sysparm_domain_scope%3Dnull
24. Testing - Incident > New > State.

25. New Incident - https://dev347964.service-now.com/now/nav/ui/classic/params/target/sys_script.do%3Fsys_id%3D2c58c7fcc3f16210dbc11c65e401314c%26sysparm_view%3D%26sysparm_domain%3Dnull%26sysparm_domain_scope%3Dnull
    Business Rules - https://dev347964.service-now.com/now/nav/ui/classic/params/target/sys_script.do%3Fsys_id%3D2c58c7fcc3f16210dbc11c65e401314c%26sysparm_view%3D%26sysparm_domain%3Dnull%26sysparm_domain_scope%3Dnull

26. 



















